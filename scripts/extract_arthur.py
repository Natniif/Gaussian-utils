#### EXTRACT.PY - This program takes as input an output file from a geometry optimization/frequency calculation run in Gaussian and
####             extracts a) its energy; b) the energy's zero-point correction; c) the sum of free energies; d) charges and spin densities.
#### Usage: in a terminal, type in: python3 extract.py GAUSSIAN_OUTPUT_FILE NAME_OF_THE_FILE_WHERE_DATA_WILL_BE_EXTRACTED_TO and hit ENTER
####        You can adjust it to your own specific needs, specially when it comes to the bottom lines, which sum up spin densities 
####        and charges of a P450 QM-cluster model. Should you have any questions, just e-mail artur.hermano@hotmail.com 
####                                                                                                      Manchester, UK, 2022

import sys
gauss_out = open(sys.argv[1],'r')       #opens the Gaussian output file for reading
#data = open(sys.argv[2],'w')       #creates a file for writing all the important information

line = gauss_out.readline()
while(line):                                              #this loop goes through all lines of the file and grabs the ones that 
                                                           #contain the energies of the final structure generated by Gaussian
	line1 = ' '.join(line.rstrip().split())
	line = line1.split(' ')
	if (' '.join(line[0:2]) == 'Zero-point correction=') or (' '.join(line[0:7]) == 'Sum of electronic and thermal Free Energies='):
		# data.write(' '.join(line)+'\n')
		print(' '.join(line) + '\n')
	if (' '.join(line[0:2]) == 'SCF Done:') and (line[-2] == '1') and (line[-4] == 'A.U.'):
		print(' '.join(line)+'\n')
	line = gauss_out.readline()
gauss_out.close()
                                 #now let's extract the spin densities and charges of each atom 
# gauss_out = open(sys.argv[1],'r')
# listalines = gauss_out.readlines()
#
# last = max(idx for idx, val in enumerate(listalines) if val.strip() == 'Mulliken charges and spin densities:')
#
# for i in range(last,last+110):              #IMPORTANT: instead of '224', take the number of atoms of your system plus 2
# 	data.write(listalines[i])       #and replace it here (e.g., my system was 222 atoms, so 222+2=224)
#
# gauss_out.close()
# data.close()
#
# data = open(sys.argv[2],'a')                                           #in the next lines I define spins and charges for each component
# gauss_out = open(sys.argv[2],'r')                                           #of the system. For example, atoms 1 to 29 are the ones 
#                                                                           #equivalent to the cysteine bound to the heme, whereas atoms 30 
# spinLIG,spinFE,spinPOR,spinO,spinSUB,spinPROT = 0.0,0.0,0.0,0.0,0.0,0.0   #and 67 are, respectivelly, the iron and the oxygen atoms of
# cargLIG,cargFE,cargPOR,cargO,cargSUB,cargPROT = 0.0,0.0,0.0,0.0,0.0,0.0   #compound I. You NEED to adapt these numbers below to your
                                                                          #system's own numbering and maybe comment out segments that are
# line = gauss_out.readline()                                                #not present in your system
# while(line):
#     line1 = ' '.join(line.rstrip().split())                             #line 38 initializes the spin variables for each component
#     line = line1.split(' ')                                              #line 39 initializes the charge variables for each component
#     if len(line) == 4 and line[-1][-1] != ')':
#     	if int(line[0]) in range(32,42) or int(line[0]) == 106:                                   #range(1,30) = atoms from 1 to 29 (the axial ligand - cysteine)
#     		spinLIG += float(line[3])
#     		cargLIG += float(line[2])
#     	if int(line[0]) == 43:                                            #30 is the atom index of iron in my system
#     		spinFE += float(line[3])
#     		cargFE += float(line[2])
#     	# if int(line[0]) in range(31,67):                                  #range(31,67) = atoms from 31 to 66 (the porphyrin ring atoms)
#     	# 	spinPOR += float(line[3])
#     	# 	cargPOR += float(line[2])
#     	if int(line[0]) == 44:                                            #67 is the atom index of oxygen of Cpd I in my system
#     		spinO += float(line[3])
#     		cargO += float(line[2])
#     	if int(line[0]) in range(51,103):                                 #range(68,101) = atoms from 68 to 100 (the substrate molecule)
#     		spinSUB += float(line[3])
#     		cargSUB += float(line[2])
#     	if int(line[0]) in range(0,31) or int(line[0]) in range(45,50) or int(line[0]) in range(104,105) or int(line[0]) in range(107,108):         #range(101,223) = atoms from 101 to 222 (all the other residues
#     		spinPROT += float(line[3])                                #atoms that surround the heme and the substrate)
#     		cargPROT += float(line[2])
#     line = gauss_out.readline()
#
# data.write('\n')
# data.write('Axial Ligand Charge: '+str(cargLIG)+'\n')
# data.write('Axial Ligand Spin Density: '+str(spinLIG)+'\n')
# data.write('\n')
# data.write('Iron(Fe) Charge: '+str(cargFE)+'\n')
# data.write('Iron(Fe) Spin Density: '+str(spinFE)+'\n')
# data.write('\n')
# # data.write('Porphyrin ring Charge: '+str(cargPOR)+'\n')
# # data.write('Porphyrin ring Spin Density: '+str(spinPOR)+'\n')
# #data.write('\n')
# data.write('Oxygen Charge: '+str(cargO)+'\n')
# data.write('Oxygen Spin Density: '+str(spinO)+'\n')
# data.write('\n')
# data.write('Substrate Charge: '+str(cargSUB)+'\n')
# data.write('Substrate Spin Density: '+str(spinSUB)+'\n')
# data.write('\n')
# data.write('Protein Charge: '+str(cargPROT)+'\n')
# data.write('Protein Spin Density: '+str(spinPROT)+'\n')
# data.write('\n')
# data.write('Sum of spin densities: '+str(spinLIG+ spinFE + spinO + spinSUB+ spinPROT))
#
# gauss_out.close()
# data.close()
